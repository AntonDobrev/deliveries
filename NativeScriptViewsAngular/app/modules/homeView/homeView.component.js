"use strict";
var core_1 = require("@angular/core");
var common = require("./shared");
var shared = require("../../shared");
var HomeViewComponent = (function () {
    function HomeViewComponent(_store, _service) {
        this._store = _store;
        this._service = _service;
        this.modes = shared.Modes;
        this.mode = shared.Modes.LIST;
    }
    HomeViewComponent.prototype.ngOnInit = function () {
        this._store.loadAll();
    };
    HomeViewComponent.prototype.onSelect = function (args) {
        this._store.select(args.item);
        this.onNavigate(shared.Modes.DETAIL);
    };
    HomeViewComponent.prototype.onSave = function (args) {
        this._store.save(args.item);
        this.onNavigate(this.mode === shared.Modes.ADD ? shared.Modes.LIST : shared.Modes.DETAIL);
    };
    HomeViewComponent.prototype.onDelete = function (args) {
        this._store.delete(args.item);
        this.onNavigate(shared.Modes.LIST);
    };
    HomeViewComponent.prototype.onNavigateBack = function () {
        this.onNavigate(this.mode === shared.Modes.EDIT ? shared.Modes.DETAIL : shared.Modes.LIST);
    };
    HomeViewComponent.prototype.onNavigate = function (mode) {
        if (mode === shared.Modes.ADD) {
            this._store.reset();
        }
        this.mode = mode;
    };
    return HomeViewComponent;
}());
HomeViewComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: "ns-homeView",
        templateUrl: "homeView.component.html",
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        providers: []
    }),
    __metadata("design:paramtypes", [common.HomeViewStore, common.HomeViewService])
], HomeViewComponent);
exports.HomeViewComponent = HomeViewComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9tZVZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9tZVZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBa0c7QUFDbEcsaUNBQW1DO0FBQ25DLHFDQUF1QztBQVd2QyxJQUFhLGlCQUFpQjtJQU0xQiwyQkFDWSxNQUE0QixFQUM1QixRQUFnQztRQURoQyxXQUFNLEdBQU4sTUFBTSxDQUFzQjtRQUM1QixhQUFRLEdBQVIsUUFBUSxDQUF3QjtRQU41QyxVQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztRQVNqQixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxvQ0FBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsb0NBQVEsR0FBUixVQUFTLElBQUk7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxrQ0FBTSxHQUFOLFVBQU8sSUFBSTtRQUNQLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQsb0NBQVEsR0FBUixVQUFTLElBQUk7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCwwQ0FBYyxHQUFkO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVELHNDQUFVLEdBQVYsVUFBVyxJQUFrQjtRQUN6QixFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDeEIsQ0FBQztRQUVELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFHTCx3QkFBQztBQUFELENBQUMsQUE5Q0QsSUE4Q0M7QUE5Q1ksaUJBQWlCO0lBUjdCLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsUUFBUSxFQUFFLGFBQWE7UUFDdkIsV0FBVyxFQUFFLHlCQUF5QjtRQUN0QyxlQUFlLEVBQUUsOEJBQXVCLENBQUMsTUFBTTtRQUMvQyxTQUFTLEVBQUUsRUFBRTtLQUNoQixDQUFDO3FDQVNzQixNQUFNLENBQUMsYUFBYSxFQUNsQixNQUFNLENBQUMsZUFBZTtHQVJuQyxpQkFBaUIsQ0E4QzdCO0FBOUNZLDhDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgRWxlbWVudFJlZiwgVmlld0NoaWxkIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tIFwiLi9zaGFyZWRcIjtcbmltcG9ydCAqIGFzIHNoYXJlZCBmcm9tIFwiLi4vLi4vc2hhcmVkXCI7XG5pbXBvcnQgeyBBY3Rpb25CYXIgfSBmcm9tIFwidWkvYWN0aW9uLWJhclwiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiBcIm5zLWhvbWVWaWV3XCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiaG9tZVZpZXcuY29tcG9uZW50Lmh0bWxcIixcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtdXG59KVxuXG5leHBvcnQgY2xhc3MgSG9tZVZpZXdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgbW9kZXMgPSBzaGFyZWQuTW9kZXM7XG4gICAgbW9kZTogc2hhcmVkLk1vZGVzO1xuXG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBfc3RvcmU6IGNvbW1vbi5Ib21lVmlld1N0b3JlLFxuICAgICAgICBwcml2YXRlIF9zZXJ2aWNlOiBjb21tb24uSG9tZVZpZXdTZXJ2aWNlXG4gICAgKSB7XG5cbiAgICAgICAgdGhpcy5tb2RlID0gc2hhcmVkLk1vZGVzLkxJU1Q7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuX3N0b3JlLmxvYWRBbGwoKTtcbiAgICB9XG5cbiAgICBvblNlbGVjdChhcmdzKSB7XG4gICAgICAgIHRoaXMuX3N0b3JlLnNlbGVjdChhcmdzLml0ZW0pO1xuICAgICAgICB0aGlzLm9uTmF2aWdhdGUoc2hhcmVkLk1vZGVzLkRFVEFJTCk7XG4gICAgfVxuXG4gICAgb25TYXZlKGFyZ3MpIHtcbiAgICAgICAgdGhpcy5fc3RvcmUuc2F2ZShhcmdzLml0ZW0pO1xuICAgICAgICB0aGlzLm9uTmF2aWdhdGUodGhpcy5tb2RlID09PSBzaGFyZWQuTW9kZXMuQUREID8gc2hhcmVkLk1vZGVzLkxJU1QgOiBzaGFyZWQuTW9kZXMuREVUQUlMKTtcbiAgICB9XG5cbiAgICBvbkRlbGV0ZShhcmdzKSB7XG4gICAgICAgIHRoaXMuX3N0b3JlLmRlbGV0ZShhcmdzLml0ZW0pO1xuICAgICAgICB0aGlzLm9uTmF2aWdhdGUoc2hhcmVkLk1vZGVzLkxJU1QpO1xuICAgIH1cblxuICAgIG9uTmF2aWdhdGVCYWNrKCkge1xuICAgICAgICB0aGlzLm9uTmF2aWdhdGUodGhpcy5tb2RlID09PSBzaGFyZWQuTW9kZXMuRURJVCA/IHNoYXJlZC5Nb2Rlcy5ERVRBSUwgOiBzaGFyZWQuTW9kZXMuTElTVCk7XG4gICAgfVxuXG4gICAgb25OYXZpZ2F0ZShtb2RlOiBzaGFyZWQuTW9kZXMpIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IHNoYXJlZC5Nb2Rlcy5BREQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0b3JlLnJlc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgIH1cbiAgICAvLy8gY29tcG9uZW50IGFkZGl0aW9uYWwgbWV0aG9kc1xuXG59Il19